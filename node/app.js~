var apn = require('apn');
var express = require('express');
var bodyParser = require('body-parser'); 
var Firebase = require('firebase'); 

var app = express();
app.set('port', process.env.PORT || 80);

app.use(bodyParser.json());
//app.use(bodyParser.urlencoded({ extended: true }));

// firebase url
var firebaseRef = new Firebase('https://gofa.firebaseio.com/')


// set up connection to Apple Push Notification Service (APNS)
var options = { };
var apnConnection = new apn.Connection(options);

//res.send('Hey there iphone!');

	/*
	if (!req.body) {
	    return res.sendStatus(400);
	    }*/
	
app.get('/', function(req, res){
	res.send('hello world');
    });


// sending to my iphone 
var token = "c47701a27a9335022c54cc558046a658d22780215a0fdc04c89d33f6df0e715d";
var myDevice = new apn.Device(token);                    

app.post('/unseenNotif', function(req, res) { 
	var userid = req.body.userid;
	console.log(userid); 
	var pendingTrans = []; // array of pending transactions (ids) to return
	var userRef = firebaseRef.child('users'); 
	userRef.once("value", function(snapshot) { 
		var users = snapshot.val(); 
		if (userid in users) { 
		    var userRef = firebaseRef.child('users/'+userid); 
		    userRef.once("value", function(snapshot) { 
			    var userInfo = snapshot.val(); 	
			    if ('transactions' in userInfo) { 
				var transactions = userInfo["transactions"];
				if('responses' in transactions) { 
				    var respTransactions = transactions["responses"]; 
				    for (key in respTransactions) {
					if (respTransactions[key] == 'pending') { 
					    pendingTrans.push(key);
					}
				    }
				}
			    }
			    res.json({"pendingTrans": pendingTrans}); 
			});
		} else { 
		    res.json({"pendingTrans": pendingTrans}); 
		}
	    });
    });
	
/*	var transactionRef = firebaseRef.child('transactions/'+key); 
		
				transactionRef.once("value", function(snapshot) { 
					var transactionInfo = snapshot.val();
					transactionInfo["id"] = key;
					res.json({"transaction": transactionInfo, "hasNotif": "true"});
				    });
			    } else { 
				res.json({"transaction": null, "hasNotif": "false"}); 
			    }
			}
		    }
		} else {
		    res.json({"transaction": null, "hasNotif": "false"}); 
		}
	    });
	    });*/


app.post('/saveDeviceToken', function(req, res) { 
	var token = req.body.deviceToken;
	var userid = req.body.userid; 
	console.log(token); 
	console.log(userid); 
	// save device token
	var tokenRef = firebaseRef.child('deviceTokens/'+token);
	tokenRef.set(userid); 
	var userRef = firebaseRef.child('users/'+userid+'/deviceToken'); 
	userRef.set(token); 
       	res.json({"status": "success"}); 
    }); 



app.post('/getTransactionInfo', function(req, res) { 
	var transactionid = req.body.transactionid; 
	var transRef = firebaseRef.child('transactions/'+transactionid); 
	var currentTime = new Date().getTime()/1000;
	transRef.once("value", function(snapshot) { 
		var transInfo = snapshot.val(); 
		var status = transInfo["status"]; 
		var customerid = transInfo["customer"]; 
		var tripownerid = transInfo["tripowner"];
		var locid = transInfo["location"]; 
		var tripid = transInfo["trip"]; 
		var userLoc = transInfo["userLoc"];
		var willPay = transInfo["willPay"]; 
		var itemsCost = transInfo["itemsCost"]; 
		var totalCost = transInfo["totalCost"];
		var tripRef = firebaseRef.child('trips/'+tripid); 
		var customerRef = firebaseRef.child('users/'+customerid); 
	    
		var toa = transInfo["toa"];
		if (toa < currentTime) { 
		    // tripowner has arrived at location
		    if (status == "pending" || status == "deferred") { 
			// remove transaction if the toa of the trip has passed
			removeTransaction(transactionid, tripid, tripownerid); 
			res.json({"status": "deleted"}); 
		    } else { 
			//accepted or delivered trips D.T.R: other types
			// send transaction info with tripInfo = null
			var locRef = firebaseRef.child('locations/'+locid); 
			locRef.once("value", function(snapshot) {
				var locInfo = snapshot.val(); 
				var locName = locInfo['name']; 
				customerRef.once("value", function(snapshot) { 
				    var custInfo = snapshot.val(); 
				    var custName = custInfo["username"]; 
    				    var tripOwnerRef = firebaseRef.child('users/'+tripownerid); 
				    tripOwnerRef.once("value", function(snapshot) { 
					    var tripOwnerInfo = snapshot.val(); 
					    var tripOwnerName = tripOwnerInfo["username"];
					    var tripOwnerEmail = tripOwnerInfo["email"]; 
					    res.json({"status": "success", "id": transactionid, 
							"tripInfo": null, "toa": toa, "location": locid, "locName": locName, "custid": customerid, 
							"custName": custName, "transStatus": status,
							"tripOwnerName": tripOwnerName, "tripOwnerEmail": tripOwnerEmail,
							"tripOwnerId": tripownerid, "userLoc": userLoc, "willPay": willPay, "itemsCost": itemsCost, 
							"totalCost": totalCost});
					});  
				    }); 
			    });
		    }
		} else {
		    // tripowner has not arrived at location
		    var locRef = firebaseRef.child('locations/'+locid); 
		    locRef.once("value", function(snapshot) {
			    var locInfo = snapshot.val(); 
			    var locName = locInfo['name']; 
			    customerRef.once("value", function(snapshot) { 
				    var custInfo = snapshot.val(); 
				    var custName = custInfo["username"]; 
				    var tripOwnerRef = firebaseRef.child('users/'+tripownerid); 
				    tripOwnerRef.once("value", function(snapshot) { 
					    var tripOwnerInfo = snapshot.val(); 
					    var tripOwnerName = tripOwnerInfo["username"]; 
					    var tripOwnerEmail = tripOwnerInfo["email"]; 
					    var tripRef = firebaseRef.child('trips/'+tripid);
					    tripRef.once("value", function(snapshot) { 
						    var tripInfo = snapshot.val(); 
						    res.json({"status": "success", "id": transactionid, 
								"tripInfo": tripInfo, "toa": toa, "location": locid, "locName": locName, "custid": customerid,
								"custName": custName, "transStatus": status,
								"tripOwnerName": tripOwnerName, "tripOwnerEmail": tripOwnerEmail,
								"tripOwnerId": tripownerid, "userLoc": userLoc, "willPay": willPay, "itemsCost": itemsCost, 
								"totalCost": totalCost});
						}); 
					});
				});
			});
		}
	    });
    }); 

app.post('/deferTransaction', function(req, res) {
        var transactionid = req.body.transactionid;
	var userid = req.body.userid; 
        firebaseRef.child('users/'+userid+'/transactions/responses/'+transactionid).set('deferred');
	firebaseRef.child('transactions/'+transactionid+'/status').set('deferred');
	// need to defer in other transaction locations as well
	res.json({"status": "success"});
    }); 


app.post('/savebag', function(req, res) { 
	var bagInfo = req.body;
	console.log(bagInfo.contents); 
	var bagid = bagInfo.locationid+'_'+bagInfo.userid; 
	var bagRef = firebaseRef.child('bags/'+bagid); 
	var userRef = firebaseRef.child('users/'+bagInfo.userid+'/bags/'+bagInfo.locationid);
	bagRef.set({
		location: bagInfo.locationid, 
		    user: bagInfo.userid,
		    contents: bagInfo.contents
		    });
	userRef.set(bagid);
	res.json({"status": "success"});
    }); 

app.post('/getbag', function(req, res) {
	var bagInfo = req.body; 
	var bagid = bagInfo.locationid+'_'+bagInfo.userid;
	var bagRef = firebaseRef.child('bags'); 
	bagRef.once("value", function(snapshot) { 
		var bags = snapshot.val(); 
		console.log(bags); 
		console.log(bagid); 
		if (bags != null) {
		    if (bagid in bags) {
			var bag = bags[bagid];
			var bagContents = bag["contents"];
			console.log(bagContents); 
			res.json({"contents": bagContents}); 
		    } else { 
			res.json({"contents": null}); 
		    }
		} else {
		    res.json({"contents": null}); 
		}
	    }); 
    }); 

app.post('/ping', function (req, res) {
        
	var senderInfo = req.body;
	//console.log(req.body); 
	console.log(senderInfo.userid); 
	var senderRef = firebaseRef.child('users/'+senderInfo.userid);
	var userRef = firebaseRef.child('users/simplelogin:8'); 
	userRef.once("value", function(snapshot) { 
		var userInfo = snapshot.val(); 
		var deviceToken = userInfo.deviceToken; 
				
		console.log(deviceToken); 
		senderRef.once("value", function(snapshot) { 
			var senderInfo2 = snapshot.val(); 
			var username = senderInfo2.username; 
			
			var note = new apn.Notification();
			var device = new apn.Device(deviceToken);                    
			note.expiry = Math.floor(Date.now() / 1000) + 3600; // Expires 1 hour from now.
			note.badge = 1;
			note.sound = "ping.aiff";
			note.alert = "\uD83D\uDCE7 \u2709 You have a new message from " + username;
			note.payload = {'messageFrom': username};
			//console.log(myDevice); 
			//console.log(note); 
			//console.log(options); 
			apnConnection.pushNotification(note, device);
			res.json({"status": "success"});
		    }); 
	    }); 
    });    

app.post('/pingUser', function (req, res) {
        
	var reqInfo = req.body;
	var custid = reqInfo.custid; 
	var custName = reqInfo.custName; 
	var tripid = reqInfo.tripid; 
	var bagContents = reqInfo.bagContents;
	var userLoc = reqInfo.userLoc;
	var locname = reqInfo.locName; 
	var willPay = reqInfo.willPay; 

	var senderRef = firebaseRef.child('users/'+custid);
	var tripRef = firebaseRef.child('trips/'+tripid); 
	
	tripRef.once("value", function(snapshot) { 
		var tripInfo = snapshot.val(); 
		var locationid = tripInfo["location"];
		var tripownerid = tripInfo["user"]; 
		var toa = tripInfo["toa"]; 
		var locRef = firebaseRef.child('locations/'+locationid); 
		var userRef = firebaseRef.child('users/'+tripownerid); 
		userRef.once("value", function(snapshot) { 
			var userInfo = snapshot.val(); 
			var deviceToken = userInfo["deviceToken"]; 
			// update Firebase with new transaction (pending)
			var transactionid = tripid+'_'+custid;
			senderRef.child('transactions/requests/'+transactionid).set('pending'); 
			userRef.child('transactions/responses/'+transactionid).set('pending');
			tripRef.child('transactions/'+transactionid).set('pending'); 
			
			// initiate a pending transaction
			var transaction = {'customer': custid, 'tripowner': tripownerid, 'location': locationid, 'trip': tripid, 
					   'toa': toa, 'bagContents': bagContents, 'userLoc': userLoc, 'willPay': willPay, 'status': 'pending'};
			// update transactions folder with transaction
			firebaseRef.child('transactions/'+transactionid).set(transaction); 

			// update customer's bag (in case it was changed during request)
			var bagid = locationid+'_'+custid;
			var bagRef = firebaseRef.child('bags/'+bagid);
			var custBagRef = firebaseRef.child('users/'+custid+'/bags/'+locationid);			
			bagRef.set({
				location: locationid, 
				    user: custid,
				    contents: bagContents
				    });
			custBagRef.set(bagid); 
			
			// create notification and push 
			var note = new apn.Notification();
			var device = new apn.Device(deviceToken);                    
			note.expiry = Math.floor(Date.now() / 1000) + 3600; // Expires 1 hour from now.
			note.badge = 1;
			note.sound = "ping.aiff";
			note.alert =  custName + ' needs something from ' + locname + '!';
			note.payload = {'messageFrom': custName, 'location': locname, 
					'bag': bagContents, 'transactionid': transactionid}
			note.category = "REQUEST_CATEGORY"; 
			//console.log(myDevice); 
			//console.log(note); 
			//console.log(options); 
			apnConnection.pushNotification(note, device);
			res.json({"status": "success"});
		    });
	    }); 
    }); 

app.post('/pingUserAccept', function (req, res) {
        
	var reqInfo = req.body;
	var transactionid = reqInfo.transactionid; 
	var userid = reqInfo.userid; 
	console.log(transactionid);
	console.log(userid); 
	var transactionRef = firebaseRef.child('transactions/'+transactionid); 
	transactionRef.once("value", function(snapshot) { 
		var transInfo = snapshot.val(); 
		var customerid = transInfo["customer"]; 
		var tripid = transInfo["trip"];
		// will have to change the status of all the other pending transations the user may have for the same location!
		// so that no more than one tripgoer serves the customer's need at that particular store, with his/her partic. bag
		var customerRef = firebaseRef.child('users/'+customerid);
		customerRef.once("value", function(snapshot) { 
			var custInfo = snapshot.val(); 
			var deviceToken = custInfo["deviceToken"]; 
			var tripRef = firebaseRef.child('trips/'+tripid);
			tripRef.once("value", function(snapshot) { 
				var tripInfo = snapshot.val(); 
				var locationid = tripInfo["location"]; 
				var userid = tripInfo["user"]; 
				// change status of transaction to ACCEPTED
				changeTransactionStatus(transactionid, tripid, customerid, userid, 'accepted')
				var locationRef = firebaseRef.child('locations/'+locationid); 
				locationRef.once("value", function(snapshot) { 
					var locInfo = snapshot.val(); 
					var locName = locInfo["name"]; 
					var userRef = firebaseRef.child('users/'+userid); 
					userRef.once("value", function(snapshot) { 
						var userInfo = snapshot.val(); 
						var userName = userInfo["username"]; 
						// create notification and push 
						var note = new apn.Notification();
						var device = new apn.Device(deviceToken);                    
						note.expiry = Math.floor(Date.now() / 1000) + 3600; // Expires 1 hour from now.
						note.badge = 1;
						note.sound = "ping.aiff";
						note.alert =  userName + ' is going to get what you needed from ' + locName + '!';
						note.payload = {'messageFrom': userName, 'location': locName, 
								'transactionid': transactionid}; 
						apnConnection.pushNotification(note, device);
						res.json({"status": "success"});
					    }); 
				    }); 
			    }); 
		    }); 
	    }); 
    }); 

app.post('/pingUserPaid', function (req, res) {
	var transactionid = req.body.transactionid; 
	var customerid = req.body.customerid;
	var custName = req.body.custName; 
	var tripOwnerid = req.body.tripOwnerId;
	var locName = req.body.locName; 
	var tripOwnerName = req.body.tripOwnerName; 
	var locid = req.body.locid; 
	var toa = req.body.toa; 
	var bagContents = req.body.bagContents; 
	var delivFee = req.body.delivFee; 
	var itemsCost = req.body.itemsCost; 
	var totalCost = req.body.totalCost; 

	var transactionRef = firebaseRef.child('transactions/'+transactionid); 
	transactionRef.once("value", function(snapshot) { 
		var transInfo = snapshot.val(); 
		var tripid = transInfo["trip"];
		// archive transaction under paidTransactions
		archiveTransaction(transactionid, customerid, custName, tripOwnerid, tripOwnerName, locid, locName, toa, bagContents, delivFee, itemsCost, totalCost); 
		// remove transaction from active transactions
		removeTransaction(transactionid, tripid, tripOwnerid); 
		var tripOwnerRef = firebaseRef.child('users/'+tripOwnerid);
		tripOwnerRef.once("value", function(snapshot) { 
			var tripOwnerInfo = snapshot.val(); 
			var deviceToken = tripOwnerInfo["deviceToken"]; 
			// create notification and push 
		      	var note = new apn.Notification();
			var device = new apn.Device(deviceToken);                    
			note.expiry = Math.floor(Date.now() / 1000) + 3600; // Expires 1 hour from now.
			note.badge = 1;
			note.sound = "ping.aiff";
			note.alert =  custName + ' has paid you for your trip to ' + locName + '!';
			note.payload = {'messageFrom': custName, 'location': locName, 
					'transactionid': transactionid}; 
			apnConnection.pushNotification(note, device);
			res.json({"status": "success"});
		    }); 
	    }); 
    });
	
function archiveTransaction(transactionid, customerid, custName, tripOwnerid, tripOwnerName, locid, locName, toa, bagContents, delivFee, itemsCost, totalCost) { 
    var paidTransRef = firebaseRef.child('paidTransactions/'+transactionid); 
    paidTransRef.set({customer: customerid, tripOwner: tripOwnerid, custName: custName, tripOwnerName: tripOwnerName, location: locid, 
		locName: locName, toa: toa, delivFee: delivFee, itemsCost: itemsCost, totalCost: totalCost}); 
    var locationRef = firebaseRef.child('locations/'+locid+'/paidTransactions/'+transactionid); 
    locationRef.set(bagContents); 
    var custRef = firebaseRef.child('users/'+customerid+'/paidTransactions/requests/'+transactionid); 
    custRef.set(bagContents); 
    var tripOwnerRef = firebaseRef.child('users/'+tripOwnerid+'/paidTransactions/responses/'+transactionid); 
    tripOwnerRef.set(bagContents);     
}

app.post('/pingUserReject', function(req, res) { 
	var reqInfo = req.body;
	var transactionid = reqInfo.transactionid; 
	var tripownerid = reqInfo.userid; 
	var tripOwnerName = reqInfo.tripOwnerName; 
	var locName = reqInfo.locName; 
	var transactionRef = firebaseRef.child('transactions/'+transactionid); 
	transactionRef.once("value", function(snapshot) { 
		var transInfo = snapshot.val(); 
		var customerid = transInfo["customer"];
		var tripid = transInfo["trip"];
		// remove transaction from database
		removeTransaction(transactionid, tripid, tripownerid); 
		var customerRef = firebaseRef.child('users/'+customerid);
		customerRef.once("value", function(snapshot) { 
			var custInfo = snapshot.val(); 
			var deviceToken = custInfo["deviceToken"]; 
			// create notification and push 
			var note = new apn.Notification();
			var device = new apn.Device(deviceToken);                    
			note.expiry = Math.floor(Date.now() / 1000) + 3600; // Expires 1 hour from now.
			note.badge = 1;
			note.sound = "ping.aiff";
			note.alert =  tripOwnerName + ' can\'t get what you needed from ' + locName + ', sorry!';
			note.payload = {'messageFrom': tripOwnerName, 'location': locName, 
					'transactionid': transactionid}; 
			apnConnection.pushNotification(note, device);
			res.json({"status": "success"});
		    }); 
	    }); 
    }); 

app.post('/cancelRequest', function(req, res) { 
	var reqInfo = req.body;
	var transactionid = reqInfo.transactionid; 
	var tripownerid = reqInfo.userid; 
	var tripOwnerName = reqInfo.tripOwnerName; 
	var locName = reqInfo.locName; 
	var transactionRef = firebaseRef.child('transactions/'+transactionid); 
	transactionRef.once("value", function(snapshot) { 
		var transInfo = snapshot.val(); 
		var customerid = transInfo["customer"];
		var tripid = transInfo["trip"];
		// remove transaction from database
		removeTransaction(transactionid, tripid, tripownerid); 
		res.json({"status": "success"}); 
	    });
    });

app.post('/pingUserDelivered', function(req, res) { 
	var transactionid = req.body.transactionid; 
	var tripownerid = req.body.userid; 
	var tripOwnerName = req.body.tripOwnerName; 
	var locName = req.body.locName; 
	var transactionRef = firebaseRef.child('transactions/'+transactionid); 
	transactionRef.child('itemsCost').set(req.body.itemsCost); 
	transactionRef.child('totalCost').set(req.body.totalCost);
	transactionRef.once("value", function(snapshot) { 
		var transInfo = snapshot.val(); 
		var customerid = transInfo["customer"];
		var tripid = transInfo["trip"];
		changeTransactionStatus(transactionid, tripid, customerid, tripownerid, "delivered"); 
		var customerRef = firebaseRef.child('users/'+customerid);
		customerRef.once("value", function(snapshot) { 
			var custInfo = snapshot.val(); 
			var deviceToken = custInfo["deviceToken"]; 
			// create notification and push 
			var note = new apn.Notification();
			var device = new apn.Device(deviceToken);                    
			note.expiry = Math.floor(Date.now() / 1000) + 3600; // Expires 1 hour from now.
			note.badge = 1;
			note.sound = "ping.aiff";
			note.alert =  tripOwnerName + ' has delivered what you needed from ' + locName + '.';
			note.payload = {'messageFrom': tripOwnerName, 'location': locName, 
					'transactionid': transactionid}; 
			apnConnection.pushNotification(note, device);
			res.json({"status": "success"});
		    }); 
	    }); 
    }); 

app.post('/postTrip', function(req, res) { 
	var locid = req.body.locationid; 
	var userid = req.body.userid; 
	var toa = req.body.toa; 
	var locName = req.body.locName; 
	var userName = req.body.userName;
	// D.T.R: have not accounted for public or private trip yet (all are private right now)
	// create tripid 
	var tripid = userid + '_' + toa; 

	var tripRef = firebaseRef.child('trips/'+tripid); 
	tripRef.set({user: userid, location: locid, toa: toa}); 
	var userTripRef = firebaseRef.child('users/'+userid+'/trips/'+tripid); 
	userTripRef.set(toa); 
	var locationTripRef = firebaseRef.child('locations/'+locid+'/trips/'+tripid); 
	locationTripRef.set(toa);

	if (userName != "Andrew G") { 
	    // send notification to user's friends 
	    var usersRef = firebaseRef.child('users'); 
	    usersRef.once("value", function(snapshot) {
		    var users = snapshot.val(); 
		    for (user in users) { 
			if (user != userid) { 
			    console.log(user); 
			    pingUserWithTrip(user, userName, locName); 
			}
		    }
		    res.json({"status": "success", "tripid": tripid}); 
		});
	} else { 
	    res.json({"status": "success", "tripid": tripid}); 
	}
    }); 

function pingUserWithTrip(userid, userName, locName) { 
    var userRef = firebaseRef.child('users/'+userid); 
    userRef.once("value", function(snapshot) { 
	    var userInfo = snapshot.val(); 
	    var deviceToken = userInfo["deviceToken"];
	    if (deviceToken != null) {
		// create notification and push 
		var note = new apn.Notification();
		var device = new apn.Device(deviceToken);                    
		note.expiry = Math.floor(Date.now() / 1000) + 3600; // Expires 1 hour from now.
		note.badge = 1;
		note.sound = "ping.aiff";
		note.alert =  userName + ' is going to ' + locName + ' soon!';
		note.payload = {'messageFrom': userName, 'location': locName};
		note.category = "TRIP_CATEGORY"; 
		apnConnection.pushNotification(note, device);
	    }
	});
}

app.post('/getTrips', function(req, res) { 
	var locid = req.body.locationid; 
	var locationRef = firebaseRef.child('locations/'+locid);
	var activeTrips = []; 
	var currentTime = new Date().getTime()/1000;
	console.log(currentTime); 
      	locationRef.once("value", function(snapshot) { 
		var locationInfo = snapshot.val(); 
		// check if any trips
		var trips = null; 
		if ("trips" in locationInfo) { 
		    trips = locationInfo["trips"]; 
		    // remove trips that are outdated
		    for (tripid in trips) {
			var toa = trips[tripid];
			if (toa < currentTime) { 
			    removeTrip(tripid); 
			} else { 
			    var trip = {};
			    trip["tripid"] = tripid;
			    trip["toa"] = trips[tripid];
			    console.log(trip); 
			    activeTrips.push(trip); 
			}
		    }
		    res.json({"status": "success", "trips": activeTrips}); 
		} else { 
		    res.json({"status": "success", "trips": activeTrips}); 
		}
	    }); 
    }); 
	    
app.post('/getTripInfo', function(req, res) { 
	var tripid = req.body.tripid; 
	var tripRef = firebaseRef.child('trips/'+tripid); 
	tripRef.once("value", function(snapshot) { 
		var tripInfo = snapshot.val(); 
		var userid = tripInfo["user"]; 
		var locid = tripInfo["location"]; 
		var userRef = firebaseRef.child('users/'+userid); 
		userRef.once("value", function(snapshot) { 
			var userInfo = snapshot.val(); 
			var userName = userInfo["username"]; 
			tripInfo["userName"] = userName;
			var locRef = firebaseRef.child('locations/'+locid); 
			locRef.once("value", function(snapshot) { 
				var locInfo = snapshot.val(); 
				var locName = locInfo["name"];
				tripInfo["locName"] = locName; 
				res.json({"status": "success", "tripInfo": tripInfo}); 
			    });
		    }); 
	    }); 
    });

app.post('/getTransactions', function(req, res) { 
    var userid = req.body.userid; 
    var userRef = firebaseRef.child('users/'+userid); 
    var currentTime = new Date().getTime()/1000;
    userRef.once("value", function(snapshot) { 
	    var userInfo = snapshot.val(); 
	    // check if any transactions
	    var transactions = null; 
	    if ("transactions" in userInfo) { 
		transactions = userInfo["transactions"];
		if ("requests" in transactions) { 
		    var reqTransactions = transactions["requests"]; 
		    var reqTransactionsRef = userRef.child("transactions/requests"); 
		    reqTransactionsRef.once("value", function(snapshot) { 
			    var reqTransInfo = snapshot.val();
			    if ("responses" in transactions) { 
				var resTransactionsRef = userRef.child("transactions/responses"); 
				resTransactionsRef.once("value", function(snapshot) { 
					var resTransInfo = snapshot.val(); 
					// user has requests and responses
					res.json({"status": "success", "reqTransactions": reqTransInfo, "resTransactions": resTransInfo}); 
				    }); 
			    } else {
				// user only has requests
				res.json({"status": "success", "reqTransactions": reqTransInfo, "resTransactions": null}); 
			    }
			}); 
		} else {
		    // only has transactions for trips initiated by user (responses)
		    var resTransactionsRef = userRef.child("transactions/responses"); 
		    resTransactionsRef.once("value", function(snapshot) { 
			    var resTransInfo = snapshot.val(); 
			    res.json({"status": "success", "reqTransactions": null, "resTransactions": resTransInfo}); 
			});
		} 
	    } else {
		// user has no transactions
		res.json({"status": "empty", "reqTransactions": null, "resTransactions": null}); 
	    }
	}); 
    }); 

app.post('/getUserCurTrips', function(req, res) { 
	var userid = req.body.userid; 
	var userRef = firebaseRef.child('users/'+userid); 
	userRef.once("value", function(snapshot) { 
		var userInfo = snapshot.val(); 
		// check if any current trips
		var trips = null; 
		if ("trips" in userInfo) { 
		    trips = userInfo["trips"];
		    res.json({"status": "yes", "trips": trips}); 
		} else { 
		    res.json({"status": "no", "trips": null});
		}
	    }); 
    }); 

app.post('/getPaidTransactions', function(req, res) { 
	var userid = req.body.userid; 
	var userRef = firebaseRef.child('users/'+userid); 
	userRef.once("value", function(snapshot) { 
		var userInfo = snapshot.val(); 
		// check if any paid transactions (past transactions)
		var transactions = null; 
		if ("paidTransactions" in userInfo) { 
		    transactions = userInfo["paidTransactions"];
		    if ("requests" in transactions) { 
			var reqTransactions = transactions["requests"]; 
			var reqTransactionsRef = userRef.child("paidTransactions/requests"); 
			reqTransactionsRef.once("value", function(snapshot) { 
				var reqTransInfo = snapshot.val();
				if ("responses" in transactions) { 
				    var resTransactionsRef = userRef.child("paidTransactions/responses"); 
				    resTransactionsRef.once("value", function(snapshot) { 
					    var resTransInfo = snapshot.val(); 
					    // user has requests and responses
					    res.json({"status": "success", "reqTransactions": reqTransInfo, "resTransactions": resTransInfo}); 
					}); 
				} else {
				    // user only has requests
				    res.json({"status": "success", "reqTransactions": reqTransInfo, "resTransactions": null}); 
				}
			    }); 
		    } else {
			// only has transactions for trips initiated by user (responses)
			var resTransactionsRef = userRef.child("paidTransactions/responses"); 
			resTransactionsRef.once("value", function(snapshot) { 
				var resTransInfo = snapshot.val(); 
				res.json({"status": "success", "reqTransactions": null, "resTransactions": resTransInfo}); 
			    });
		    } 
		} else {
		    // user has no transactions
		    res.json({"status": "empty", "reqTransactions": null, "resTransactions": null}); 
		}
	    }); 
    }); 	

app.post('/getPaidTransactionInfo', function(req, res) { 
	var transactionid = req.body.transactionid; 
	var paidTransRef = firebaseRef.child('paidTransactions/'+transactionid); 
	paidTransRef.once("value", function(snapshot) { 
		var transInfo = snapshot.val(); 
		var customerid = transInfo["customer"]; 
		var tripownerid = transInfo["tripOwner"];
		var locid = transInfo["location"]; 
		var toa = transInfo["toa"]; 
		//var bagContents = transInfo["bagContents"];
		res.json(transInfo); 
	    });
    }); 

function removeTrip(tripid) { 
    var tripRef = firebaseRef.child('trips/'+tripid); 
    tripRef.once("value", function(snapshot) { 
	    var tripInfo = snapshot.val(); 
	    var locid = tripInfo["location"]; 
	    var userid = tripInfo["user"];
	    var locRef = firebaseRef.child('locations/'+locid); 
	    locRef.child('trips/'+tripid).remove();
	    var transactions = null; 
	    if ("transactions" in tripInfo) { 
		transactions = tripInfo["transactions"];
	    }
	    for (key in transactions) { 
		if (transactions[key] == "pending" || transactions[key] == "deferred") { 
		    removeTransaction(key, tripid, userid); 
		}
	    }
	    // remove trip from user's data *****NEED TO FIGURE OUT HOW, IF, WHERE, to ARCHIVE TRIPS
	    var userRef = firebaseRef.child('users/'+userid); 
	    userRef.child('trips/'+tripid).remove(); 
	    tripRef.remove(); 
	});
}

app.post('/getLocLogo', function(req, res) { 
	var locid = req.locid; 
	var locLogoRef = firebaseRef.child('locations/'+locid+'/logo'); 
	locLogoRef.once("value", function(snapshot) { 
		var logoInfo = snapshot.val(); 
		res.json(logoInfo); 
	    }); 
    }); 

app.get('/locations', function (req, res) {
	var locationsRef = firebaseRef.child('locations'); 
	locationsRef.once("value", function(snapshot) { 
		var locations = snapshot.val();
		res.json(locations);
	    });
    });

function changeTransactionStatus(transactionid, tripid, customerid, tripownerid, statusType) { 
   
    firebaseRef.child('transactions/'+transactionid+'/status').set(statusType);
    firebaseRef.child('users/'+customerid+'/transactions/requests/'+transactionid).set(statusType); 
    firebaseRef.child('users/'+tripownerid+'/transactions/responses/'+transactionid).set(statusType); 
    // the trip may have been deleted because of toa, so check to see if it exists first
    var tripRef = firebaseRef.child('trips/'+tripid);
    tripRef.once("value", function(snapshot) {
	    var tripInfo = snapshot.val(); 
	    if (tripInfo != null) { 
		tripRef.child('transactions/'+transactionid).set(statusType); 
	    }
	});
}
 
	

function removeTransaction(transactionid, tripid, tripownerid) { 
    var transRef = firebaseRef.child('transactions/'+transactionid); 
    transRef.once("value", function(snapshot) { 
	    var transInfo = snapshot.val(); 
	    var customerid = transInfo["customer"];
	    var custRef = firebaseRef.child('users/'+customerid); 
	    custRef.child('transactions/requests/'+transactionid).remove(); 
	    var tripownerRef = firebaseRef.child('users/'+tripownerid);
	    tripownerRef.child('transactions/responses/'+transactionid).remove(); 
	    var tripRef = firebaseRef.child('trips/'+tripid);
	    tripRef.child('transactions/'+transactionid).remove(); 
	    transRef.remove(); 
	}); 
}

var server = app.listen(80, function () {
	
	var host = server.address().address;
	var port = server.address().port;
	
	console.log('Example app listening at http://%s:%s', host, port);
	
    });
